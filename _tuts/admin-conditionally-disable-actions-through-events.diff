diff --git a/src/AppBundle/Entity/User.php b/src/AppBundle/Entity/User.php
index abaede7..0d067b8 100644
--- a/src/AppBundle/Entity/User.php
+++ b/src/AppBundle/Entity/User.php
@@ -108,6 +108,11 @@ class User implements UserInterface
         return $this->email;
     }
 
+    public function hasRole($role)
+    {
+        return in_array('ROLE_'.$role, $this->getRoles(), true);
+    }
+
     public function getRoles()
     {
         $roles = $this->roles;
diff --git a/src/AppBundle/Event/EasyAdminSubscriber.php b/src/AppBundle/Event/EasyAdminSubscriber.php
index 017970a..5fac5e5 100644
--- a/src/AppBundle/Event/EasyAdminSubscriber.php
+++ b/src/AppBundle/Event/EasyAdminSubscriber.php
@@ -6,7 +6,9 @@ use AppBundle\Entity\User;
 use JavierEguiluz\Bundle\EasyAdminBundle\Event\EasyAdminEvents;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 use Symfony\Component\EventDispatcher\GenericEvent;
+use Symfony\Component\HttpFoundation\Request;
 use Symfony\Component\Security\Core\Authentication\Token\Storage\TokenStorageInterface;
+use Symfony\Component\Security\Core\Exception\AccessDeniedException;
 
 class EasyAdminSubscriber implements EventSubscriberInterface
 {
@@ -23,10 +25,32 @@ class EasyAdminSubscriber implements EventSubscriberInterface
     public static function getSubscribedEvents()
     {
         return [
+            EasyAdminEvents::PRE_DELETE => ['preDelete'],
+            EasyAdminEvents::PRE_EDIT => ['preEdit'],
             EasyAdminEvents::PRE_UPDATE => ['preUpdate'],
         ];
     }
 
+    public function preDelete(GenericEvent $event)
+    {
+        $entity = $event->getSubject();
+
+        if ($entity['class'] === User::class) {
+            $this->denyUserActions($event);
+        }
+    }
+
+    public function preEdit(GenericEvent $event)
+    {
+        /** @var Request $request */
+        $request = $event->getArgument('request');
+        $entity = $request->attributes->get('easyadmin')['item'];
+
+        if ($entity instanceof User) {
+            $this->denyUserActions($event);
+        }
+    }
+
     public function preUpdate(GenericEvent $event)
     {
         $entity = $event->getSubject();
@@ -40,4 +64,13 @@ class EasyAdminSubscriber implements EventSubscriberInterface
             $entity->setLastUpdatedBy($user);
         }
     }
+
+    private function denyUserActions(GenericEvent $event)
+    {
+        $user = $this->tokenStorage->getToken()->getUser();
+
+        if (!$user instanceof User || !$user->hasRole('SUPERADMIN')) {
+            throw new AccessDeniedException();
+        }
+    }
 }
